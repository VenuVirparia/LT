lex

%{
#include "y.tab.h"
%}

%%
[0-9]+      { yylval = atoi(yytext); return NUM; }
[\t ]+      ; // skip whitespace
\n          return EOL;
.           return yytext[0]; // return character
%%
int yywrap() {return -1;}


---------------------------------------------------------------------------------------
yacc

%{
#include <stdio.h>
#include <stdlib.h>

int yylex();
void yyerror(const char *s);
%}

%token NUM
%token EOL

%left '+' '-'
%left '*' '/'
%nonassoc UMINUS

%%
input:
    | input line
    ;

line:
    expr EOL    { printf("Result = %d\n", $1); }
    ;

expr:
      expr '+' expr    { $$ = $1 + $3; }
    | expr '-' expr    { $$ = $1 - $3; }
    | expr '*' expr    { $$ = $1 * $3; }
    | expr '/' expr    { 
                        if ($3 == 0) {
                            yyerror("Division by zero");
                            exit(1);
                        } else {
                            $$ = $1 / $3;
                        }
                      }
    | '-' expr  %prec UMINUS   { $$ = -$2; }
    | '(' expr ')'             { $$ = $2; }
    | NUM                      { $$ = $1; }
    ;
%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Enter expressions (press Ctrl+D to exit):\n");
    return yyparse();
}




-------------------------------------------
yacc -d calc.y       # Generates y.tab.c and y.tab.h
lex calc.l           # Generates lex.yy.c
gcc lex.yy.c y.tab.c -o calc -ll
./calc               # Run the compiled calculator



Enter expressions (press Ctrl+D to exit):
3 + 4
Result = 7

10 - 2 * 3
Result = 4

(8 + 2) * 5
Result = 50

-5 + 3
Result = -2

10 / 2
Result = 5

10 / 0
Error: Division by zero

